1|072|Edit Distance     
//https://leetcode.com/problems/edit-distance/
//Given two words word1 and word2
//find the minimum number of steps required to convert word1 to word2
//dp[i][j]表示从word1前i个字符转换到word2前j个字符最少的步骤数
//在word1插入y， 那么dp[i][j] = dp[i][j-1] + 1
//在word1删除x， 那么dp[i][j] = dp[i-1][j] + 1
//把word1中的x用y来替换，那么dp[i][j] = dp[i-1][j-1] + 1
//https://www.cnblogs.com/springfor/p/3896167.html
class Solution {
    public static void main(String[] args) {
        System.out.println(new Solution().minDistance("abc", "ade"));
    }
    public static int minDistance(String word1, String word2) {
        int len1 = word1.length();
        int len2 = word2.length();
        // len1+1, len2+1, because finally return dp[len1][len2]
        int[][] dp = new int[len1 + 1][len2 + 1];
        for (int i = 0; i <= len1; i++) {
            dp[i][0] = i;
        }
        for (int j = 0; j <= len2; j++) {
            dp[0][j] = j;
        }
        //iterate though, and check last char
        for (int i = 1; i <= len1; i++) {
            char c1 = word1.charAt(i - 1);
            for (int j = 1; j <= len2; j++) {
                char c2 = word2.charAt(j - 1);
                //if last two chars equal
                if (c1 == c2) {
                    //update dp value for +1 length
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    int replace = dp[i - 1][j - 1] + 1;
                    int insert = dp[i - 1][j] + 1;
                    int delete = dp[i][j - 1] + 1;
                    int min = Math.min(replace, insert);
                    min = Math.min(min, delete);
                    dp[i][j] = min;
                }
            }
        }
        return dp[len1][len2];
    }
}
2|087|Scramble String   
//https://leetcode.com/problems/scramble-string/
//假如把一个字符串当做一个二叉树的根，然后它的非空子字符串是它的子节点，
//然后交换某个子字符串的两个子节点，重新爬行回去形成一个新的字符串，
//这个新字符串和原来的字符串互为爬行字符串。
import java.util.Arrays;
class Solution {
    public static void main(String[] args) {
        System.out.println(new Solution().isScramble("abc", "bac"));
    }
    public boolean isScramble(String s1, String s2) {
        if (s1.length() == 0 || s1.equals(s2)) {
            return true;
        }
        if (s1.length() != s2.length()) {
            return false;
        }
        char[] arr1 = s1.toCharArray();
        char[] arr2 = s2.toCharArray();
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        if(!new String(arr1).equals(new String(arr2))){
            return false;
        }
        for(int i=1; i<s1.length(); i++){
            String a = s1.substring(0, i);
            String b = s1.substring(i, s1.length());

            String c = s2.substring(0, i);
            String d = s2.substring(i, s2.length());

            String e = s2.substring(0, s2.length()-i);
            String f = s2.substring(s2.length()-i, s2.length());

            if(isScramble(a, c) && isScramble(b, d))
                return true;
            if(isScramble(a, f) && isScramble(b, e))
                return true;
        }

        return false;
    }
}
3|091|Decode Ways       
//https://leetcode.com/problems/decode-ways/
//Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).
//The number of ways decoding "12" is 2
class Solution {
    public static void main(String[] args) {
        System.out.println(new Solution().numDecodings("12"));
    }
    public int numDecodings(String s) {
        if (s.length() == 0 || s == null || s == "0") {
            return 0;
        }
        int[] dp = new int[s.length() + 1];
        dp[0] = 1;
        dp[1] = 0;
        if (isValid(s.substring(0, 1))) {
            dp[1] = 1;
        }
        for (int i = 2; i <= s.length(); i++) {
            if (isValid(s.substring(i - 1, i))) {
                dp[i] += dp[i - 1];
            }
            if (isValid(s.substring(i - 2, i))) {
                dp[i] += dp[i - 2];
            }
        }
        return dp[s.length()];
    }
    private boolean isValid(String s) {
        if (s.charAt(0) == '0') {
            return false;
        }
        int code = Integer.parseInt(s);
        return code >= 1 && code <= 26;
    }

}
4|097|Interleaving String       https://leetcode.com/problems/interleaving-string/
5|115|Distinct Subsequences     https://leetcode.com/problems/distinct-subsequences/
6|139|Word Break        https://leetcode.com/problems/word-break/
7|140|Word Break II     https://leetcode.com/problems/word-break-ii/

1|120|Triangle      https://leetcode.com/problems/triangle/
2|152|Maximum Product Subarray      https://leetcode.com/problems/maximum-product-subarray/
3|174|Dungeon Game          https://leetcode.com/problems/dungeon-game/
4|198|House Robber          https://leetcode.com/problems/house-robber/
5|213|House Robber II       https://leetcode.com/problems/house-robber-ii/
6|221|Maximal Square        https://leetcode.com/problems/maximal-square/
7|712|Minimum ASCII Delete Sum for Two Strings      https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/
8|718|Maximum Length of Repeated Subarray   https://leetcode.com/problems/maximum-length-of-repeated-subarray/
9|018|Race Car      https://leetcode.com/problems/race-car/
